'use strict';

exports.BattleMovedex = {
	///////////////////////////////////////
	// Gen 1 Glitch Moves
	///////////////////////////////////////
	"superglitch00": {
		num: -1000,
		accuracy: 31,
		basePower: 102,
		category: "Physical",
		desc: "Executes code from address F928 if the opponent doesn't faint. Not really codeable here, so I'll just give you an opcode error. :/",
		shortDesc: "Crashes the game (sorta).",
		id: "superglitch00",
		isNonstandard: true,
		name: "Super Glitch 00",
		pp: 13,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove('[anim] Fissure');
		},
		onHit: function (target) {
			this.add('-message', "Unknown opcode fc at " + (63784 + this.random(150)).toString(16));
		},
		secondary: false,
		target: "normal",
		type: "Cooltrainerâ™€",
	},
	"superglitcha7": {
		num: -1167,
		accuracy: 33,
		basePower: 45,
		category: "Physical",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "superglitcha7",
		isNonstandard: true,
		name: "Super Glitch A7",
		pp: 0,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		drain: [1, 2],
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove('[anim] Vine Whip');
		},
		secondary: false,
		target: "normal",
		type: "Type 64",
	},
	"tm05": {
		num: -1205,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's evasiveness by 2 stages.",
		shortDesc: "Raises the user's evasiveness by 2.",
		id: "tm05",
		isNonstandard: true,
		name: "TM05",
		pp: 33,
		priority: 0,
		flags: {snatch: 1},
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove("[still]");
		},
		secondary: false,
		target: "self",
		type: "Type 81",
	},
	"tm07": {
		num: -1207,
		accuracy: 20,
		basePower: 131,
		category: "Physical",
		desc: "Simply crashes the game. What a nice move.",
		shortDesc: "rst 38h",
		id: "tm07",
		isNonstandard: true,
		name: "TM07",
		pp: 0,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove('[anim] Cut');
		},
		secondary: false,
		target: "normal",
		type: "Ghost",
	},
	"tm09": {
		num: -1209,
		accuracy: 20,
		basePower: 255,
		category: "Physical",
		desc: "The user faints after using this move, even if this move fails for having no target. This move is prevented from executing if any active Pokemon has the Ability Damp.",
		shortDesc: "The user faints.",
		id: "tm09",
		isNonstandard: true,
		name: "TM09",
		pp: 16,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove('[anim] Fire Punch');
		},
		selfdestruct: true,
		secondary: false,
		target: "normal",
		type: "Type 53",
	},
	"tm29": {
		num: -1229,
		accuracy: 0,
		basePower: 0,
		category: "Status",
		desc: "Simply crashes the game. What a nice move.",
		shortDesc: "rst 38h",
		id: "tm29",
		isNonstandard: true,
		name: "TM29",
		pp: 0,
		priority: 0,
		flags: {},
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove("[still]");
		},
		secondary: false,
		target: "self",
		type: "Normal",
	},
	"tm34": {
		num: -1234,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Does absolutely nothing.",
		shortDesc: "Does nothing.",
		id: "tm34",
		isNonstandard: true,
		name: "TM34",
		pp: 3,
		priority: 0,
		flags: {},
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove('[still]');
		},
		secondary: false,
		target: "self",
		type: "Normal",
	},
	"tm45": {
		num: -1245,
		accuracy: 31,
		basePower: 18,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "No additional effect.",
		id: "tm45",
		isNonstandard: true,
		name: "TM45",
		pp: 16,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove('[anim] Scratch');
		},
		secondary: false,
		target: "normal",
		type: "Type 83",
	},
	"tm50": {
		num: -1250,
		accuracy: 28,
		basePower: 56,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Ability Skill Link, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "tm50",
		isNonstandard: true,
		name: "TM50",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		multihit: [2, 5],
		onPrepareHit: function (target, source, move) { // animation
			this.attrLastMove('[anim] Fly');
		},
		secondary: false,
		target: "normal",
		type: "Type 35",
	},
};
